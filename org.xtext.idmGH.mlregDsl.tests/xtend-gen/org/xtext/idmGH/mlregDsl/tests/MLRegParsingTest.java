/**
 * generated by Xtext 2.23.0
 */
package org.xtext.idmGH.mlregDsl.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.idmGH.mlregDsl.mLReg.Model;
import org.xtext.idmGH.mlregDsl.tests.MLRegInjectorProvider;
import org.xtext.idmGH.mlregDsl.tests.PythonCompiler;

@ExtendWith(InjectionExtension.class)
@InjectWith(MLRegInjectorProvider.class)
@SuppressWarnings("all")
public class MLRegParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Test
  public void testLinearReg1() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("regression{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("file: \"datasets/ozone.csv\",");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("testSize : 3,");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("predictiveVariables : {1},");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("targetVariable: 0,");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("algorithm: Linear,");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("errorType: mean_squared_error");
      _builder.newLine();
      _builder.append("}\t\t");
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      final PythonCompiler cmpPython = new PythonCompiler(result);
      cmpPython.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testLinearReg2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("regression{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("file: \"datasets/ozone.csv\",");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("testSize : 3,");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("predictiveVariables : {1,2,3,4,5,6,7,8,9,10},");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("targetVariable: 0,");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("algorithm: Linear,");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("errorType: r2_score");
      _builder.newLine();
      _builder.append("}\t\t");
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      final PythonCompiler cmpPython = new PythonCompiler(result);
      cmpPython.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testLinearReg3() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("regression{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("file: \"datasets/ozone.csv\",");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("testSize : 3,");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("predictiveVariables : {1,2,9,10},");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("targetVariable: 0,");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("algorithm: Linear,");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("errorType: explained_variance_score");
      _builder.newLine();
      _builder.append("}\t\t");
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      final PythonCompiler cmpPython = new PythonCompiler(result);
      cmpPython.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testSVMReg1() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("regression{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("file: \"datasets/ozone.csv\",");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("testSize : 3,");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("predictiveVariables : {2,3,4},");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("targetVariable: 0,");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("algorithm: SVM,");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("errorType: mean_squared_error");
      _builder.newLine();
      _builder.append("}\t\t");
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      final PythonCompiler cmpPython = new PythonCompiler(result);
      cmpPython.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testSVMReg2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("regression{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("file: \"datasets/ozone.csv\",");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("testSize : 3,");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("predictiveVariables : {2,3,4},");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("targetVariable: 0,");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("algorithm: SVM,");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("errorType: explained_variance_score");
      _builder.newLine();
      _builder.append("}\t\t");
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      final PythonCompiler cmpPython = new PythonCompiler(result);
      cmpPython.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testSVMReg3() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("regression{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("file: \"datasets/ozone.csv\",");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("testSize : 3,");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("predictiveVariables : {2,3,4},");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("targetVariable: 0,");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("algorithm: SVM,");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("errorType: r2_score");
      _builder.newLine();
      _builder.append("}\t\t");
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      final PythonCompiler cmpPython = new PythonCompiler(result);
      cmpPython.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTreeReg1() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("regression{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("file: \"datasets/ozone.csv\",");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("testSize : 3,");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("predictiveVariables : {1,5},");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("targetVariable: 0,");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("algorithm: RegressionTree,");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("errorType: mean_squared_error");
      _builder.newLine();
      _builder.append("}\t\t");
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      final PythonCompiler cmpPython = new PythonCompiler(result);
      cmpPython.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTreeReg2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("regression{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("file: \"datasets/ozone.csv\",");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("testSize : 3,");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("predictiveVariables : {1,5},");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("targetVariable: 0,");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("algorithm: RegressionTree,");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("errorType: explained_variance_score");
      _builder.newLine();
      _builder.append("}\t\t");
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      final PythonCompiler cmpPython = new PythonCompiler(result);
      cmpPython.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testTreeReg3() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("regression{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("file: \"datasets/ozone.csv\",");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("testSize : 3,");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("predictiveVariables : {1,5},");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("targetVariable: 0,");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("algorithm: RegressionTree,");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("errorType: r2_score");
      _builder.newLine();
      _builder.append("}\t\t");
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      final PythonCompiler cmpPython = new PythonCompiler(result);
      cmpPython.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
