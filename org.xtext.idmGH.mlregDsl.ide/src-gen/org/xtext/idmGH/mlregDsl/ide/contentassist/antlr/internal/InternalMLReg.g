/*
 * generated by Xtext 2.24.0
 */
grammar InternalMLReg;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.idmGH.mlregDsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.idmGH.mlregDsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.idmGH.mlregDsl.services.MLRegGrammarAccess;

}
@parser::members {
	private MLRegGrammarAccess grammarAccess;

	public void setGrammarAccess(MLRegGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getMlRegressionAssignment()); }
		(rule__Model__MlRegressionAssignment)
		{ after(grammarAccess.getModelAccess().getMlRegressionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMlRegression
entryRuleMlRegression
:
{ before(grammarAccess.getMlRegressionRule()); }
	 ruleMlRegression
{ after(grammarAccess.getMlRegressionRule()); } 
	 EOF 
;

// Rule MlRegression
ruleMlRegression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMlRegressionAccess().getGroup()); }
		(rule__MlRegression__Group__0)
		{ after(grammarAccess.getMlRegressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCsvFile
entryRuleCsvFile
:
{ before(grammarAccess.getCsvFileRule()); }
	 ruleCsvFile
{ after(grammarAccess.getCsvFileRule()); } 
	 EOF 
;

// Rule CsvFile
ruleCsvFile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCsvFileAccess().getGroup()); }
		(rule__CsvFile__Group__0)
		{ after(grammarAccess.getCsvFileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestSize
entryRuleTestSize
:
{ before(grammarAccess.getTestSizeRule()); }
	 ruleTestSize
{ after(grammarAccess.getTestSizeRule()); } 
	 EOF 
;

// Rule TestSize
ruleTestSize 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestSizeAccess().getGroup()); }
		(rule__TestSize__Group__0)
		{ after(grammarAccess.getTestSizeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredictiveVars
entryRulePredictiveVars
:
{ before(grammarAccess.getPredictiveVarsRule()); }
	 rulePredictiveVars
{ after(grammarAccess.getPredictiveVarsRule()); } 
	 EOF 
;

// Rule PredictiveVars
rulePredictiveVars 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredictiveVarsAccess().getGroup()); }
		(rule__PredictiveVars__Group__0)
		{ after(grammarAccess.getPredictiveVarsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTargetVar
entryRuleTargetVar
:
{ before(grammarAccess.getTargetVarRule()); }
	 ruleTargetVar
{ after(grammarAccess.getTargetVarRule()); } 
	 EOF 
;

// Rule TargetVar
ruleTargetVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTargetVarAccess().getGroup()); }
		(rule__TargetVar__Group__0)
		{ after(grammarAccess.getTargetVarAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAlgorithm
entryRuleAlgorithm
:
{ before(grammarAccess.getAlgorithmRule()); }
	 ruleAlgorithm
{ after(grammarAccess.getAlgorithmRule()); } 
	 EOF 
;

// Rule Algorithm
ruleAlgorithm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAlgorithmAccess().getGroup()); }
		(rule__Algorithm__Group__0)
		{ after(grammarAccess.getAlgorithmAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleErrorMeasure
entryRuleErrorMeasure
:
{ before(grammarAccess.getErrorMeasureRule()); }
	 ruleErrorMeasure
{ after(grammarAccess.getErrorMeasureRule()); } 
	 EOF 
;

// Rule ErrorMeasure
ruleErrorMeasure 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getErrorMeasureAccess().getGroup()); }
		(rule__ErrorMeasure__Group__0)
		{ after(grammarAccess.getErrorMeasureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColVar
entryRuleColVar
:
{ before(grammarAccess.getColVarRule()); }
	 ruleColVar
{ after(grammarAccess.getColVarRule()); } 
	 EOF 
;

// Rule ColVar
ruleColVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColVarAccess().getIdColAssignment()); }
		(rule__ColVar__IdColAssignment)
		{ after(grammarAccess.getColVarAccess().getIdColAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AlgoName
ruleAlgoName
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgoNameAccess().getAlternatives()); }
		(rule__AlgoName__Alternatives)
		{ after(grammarAccess.getAlgoNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ErrorCalculation
ruleErrorCalculation
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getErrorCalculationAccess().getAlternatives()); }
		(rule__ErrorCalculation__Alternatives)
		{ after(grammarAccess.getErrorCalculationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AlgoName__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgoNameAccess().getRegressionTreeEnumLiteralDeclaration_0()); }
		('RegressionTree')
		{ after(grammarAccess.getAlgoNameAccess().getRegressionTreeEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getAlgoNameAccess().getSVMEnumLiteralDeclaration_1()); }
		('SVM')
		{ after(grammarAccess.getAlgoNameAccess().getSVMEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getAlgoNameAccess().getLinearEnumLiteralDeclaration_2()); }
		('Linear')
		{ after(grammarAccess.getAlgoNameAccess().getLinearEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorCalculation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getErrorCalculationAccess().getMean_squared_errorEnumLiteralDeclaration_0()); }
		('mean_squared_error')
		{ after(grammarAccess.getErrorCalculationAccess().getMean_squared_errorEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getErrorCalculationAccess().getExplained_variance_scoreEnumLiteralDeclaration_1()); }
		('explained_variance_score')
		{ after(grammarAccess.getErrorCalculationAccess().getExplained_variance_scoreEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getErrorCalculationAccess().getR2_scoreEnumLiteralDeclaration_2()); }
		('r2_score')
		{ after(grammarAccess.getErrorCalculationAccess().getR2_scoreEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MlRegression__Group__0__Impl
	rule__MlRegression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMlRegressionAccess().getRegressionKeyword_0()); }
	'regression'
	{ after(grammarAccess.getMlRegressionAccess().getRegressionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MlRegression__Group__1__Impl
	rule__MlRegression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMlRegressionAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getMlRegressionAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MlRegression__Group__2__Impl
	rule__MlRegression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMlRegressionAccess().getCsvFileAssignment_2()); }
	(rule__MlRegression__CsvFileAssignment_2)
	{ after(grammarAccess.getMlRegressionAccess().getCsvFileAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MlRegression__Group__3__Impl
	rule__MlRegression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMlRegressionAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getMlRegressionAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MlRegression__Group__4__Impl
	rule__MlRegression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMlRegressionAccess().getTestSizeAssignment_4()); }
	(rule__MlRegression__TestSizeAssignment_4)
	{ after(grammarAccess.getMlRegressionAccess().getTestSizeAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MlRegression__Group__5__Impl
	rule__MlRegression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMlRegressionAccess().getCommaKeyword_5()); }
	','
	{ after(grammarAccess.getMlRegressionAccess().getCommaKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MlRegression__Group__6__Impl
	rule__MlRegression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMlRegressionAccess().getPredictiveVarsAssignment_6()); }
	(rule__MlRegression__PredictiveVarsAssignment_6)
	{ after(grammarAccess.getMlRegressionAccess().getPredictiveVarsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MlRegression__Group__7__Impl
	rule__MlRegression__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMlRegressionAccess().getCommaKeyword_7()); }
	','
	{ after(grammarAccess.getMlRegressionAccess().getCommaKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MlRegression__Group__8__Impl
	rule__MlRegression__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMlRegressionAccess().getTargetVarAssignment_8()); }
	(rule__MlRegression__TargetVarAssignment_8)
	{ after(grammarAccess.getMlRegressionAccess().getTargetVarAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MlRegression__Group__9__Impl
	rule__MlRegression__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMlRegressionAccess().getCommaKeyword_9()); }
	','
	{ after(grammarAccess.getMlRegressionAccess().getCommaKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MlRegression__Group__10__Impl
	rule__MlRegression__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMlRegressionAccess().getAlgorithmAssignment_10()); }
	(rule__MlRegression__AlgorithmAssignment_10)
	{ after(grammarAccess.getMlRegressionAccess().getAlgorithmAssignment_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MlRegression__Group__11__Impl
	rule__MlRegression__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMlRegressionAccess().getCommaKeyword_11()); }
	','
	{ after(grammarAccess.getMlRegressionAccess().getCommaKeyword_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__12
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MlRegression__Group__12__Impl
	rule__MlRegression__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__12__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMlRegressionAccess().getErrorMeasureAssignment_12()); }
	(rule__MlRegression__ErrorMeasureAssignment_12)
	{ after(grammarAccess.getMlRegressionAccess().getErrorMeasureAssignment_12()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__13
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MlRegression__Group__13__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__Group__13__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMlRegressionAccess().getRightCurlyBracketKeyword_13()); }
	'}'
	{ after(grammarAccess.getMlRegressionAccess().getRightCurlyBracketKeyword_13()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CsvFile__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CsvFile__Group__0__Impl
	rule__CsvFile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CsvFile__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCsvFileAccess().getFileKeyword_0()); }
	'file'
	{ after(grammarAccess.getCsvFileAccess().getFileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CsvFile__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CsvFile__Group__1__Impl
	rule__CsvFile__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CsvFile__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCsvFileAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getCsvFileAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CsvFile__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CsvFile__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CsvFile__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCsvFileAccess().getCsvFileAssignment_2()); }
	(rule__CsvFile__CsvFileAssignment_2)
	{ after(grammarAccess.getCsvFileAccess().getCsvFileAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TestSize__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSize__Group__0__Impl
	rule__TestSize__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSize__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSizeAccess().getTestSizeAction_0()); }
	()
	{ after(grammarAccess.getTestSizeAccess().getTestSizeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSize__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSize__Group__1__Impl
	rule__TestSize__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSize__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSizeAccess().getTestSizeKeyword_1()); }
	'testSize'
	{ after(grammarAccess.getTestSizeAccess().getTestSizeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSize__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSize__Group__2__Impl
	rule__TestSize__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSize__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSizeAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getTestSizeAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSize__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSize__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSize__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSizeAccess().getTestSizeAssignment_3()); }
	(rule__TestSize__TestSizeAssignment_3)
	{ after(grammarAccess.getTestSizeAccess().getTestSizeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredictiveVars__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredictiveVars__Group__0__Impl
	rule__PredictiveVars__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictiveVars__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredictiveVarsAccess().getPredictiveVariablesKeyword_0()); }
	'predictiveVariables'
	{ after(grammarAccess.getPredictiveVarsAccess().getPredictiveVariablesKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictiveVars__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredictiveVars__Group__1__Impl
	rule__PredictiveVars__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictiveVars__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredictiveVarsAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getPredictiveVarsAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictiveVars__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredictiveVars__Group__2__Impl
	rule__PredictiveVars__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictiveVars__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredictiveVarsAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getPredictiveVarsAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictiveVars__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredictiveVars__Group__3__Impl
	rule__PredictiveVars__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictiveVars__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredictiveVarsAccess().getPredictiveVarAssignment_3()); }
	(rule__PredictiveVars__PredictiveVarAssignment_3)
	{ after(grammarAccess.getPredictiveVarsAccess().getPredictiveVarAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictiveVars__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredictiveVars__Group__4__Impl
	rule__PredictiveVars__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictiveVars__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredictiveVarsAccess().getGroup_4()); }
	(rule__PredictiveVars__Group_4__0)*
	{ after(grammarAccess.getPredictiveVarsAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictiveVars__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredictiveVars__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictiveVars__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredictiveVarsAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getPredictiveVarsAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredictiveVars__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredictiveVars__Group_4__0__Impl
	rule__PredictiveVars__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictiveVars__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredictiveVarsAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getPredictiveVarsAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictiveVars__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredictiveVars__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictiveVars__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredictiveVarsAccess().getPredictiveVarAssignment_4_1()); }
	(rule__PredictiveVars__PredictiveVarAssignment_4_1)
	{ after(grammarAccess.getPredictiveVarsAccess().getPredictiveVarAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TargetVar__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TargetVar__Group__0__Impl
	rule__TargetVar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetVarAccess().getTargetVariableKeyword_0()); }
	'targetVariable'
	{ after(grammarAccess.getTargetVarAccess().getTargetVariableKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TargetVar__Group__1__Impl
	rule__TargetVar__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetVarAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getTargetVarAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TargetVar__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetVarAccess().getTargetVarAssignment_2()); }
	(rule__TargetVar__TargetVarAssignment_2)
	{ after(grammarAccess.getTargetVarAccess().getTargetVarAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Algorithm__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__0__Impl
	rule__Algorithm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getAlgorithmKeyword_0()); }
	'algorithm'
	{ after(grammarAccess.getAlgorithmAccess().getAlgorithmKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__1__Impl
	rule__Algorithm__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getAlgorithmAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithm__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmAccess().getAlgoNameAssignment_2()); }
	(rule__Algorithm__AlgoNameAssignment_2)
	{ after(grammarAccess.getAlgorithmAccess().getAlgoNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ErrorMeasure__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ErrorMeasure__Group__0__Impl
	rule__ErrorMeasure__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorMeasure__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getErrorMeasureAccess().getErrorTypeKeyword_0()); }
	'errorType'
	{ after(grammarAccess.getErrorMeasureAccess().getErrorTypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorMeasure__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ErrorMeasure__Group__1__Impl
	rule__ErrorMeasure__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorMeasure__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getErrorMeasureAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getErrorMeasureAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorMeasure__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ErrorMeasure__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorMeasure__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getErrorMeasureAccess().getErrorMeasureAssignment_2()); }
	(rule__ErrorMeasure__ErrorMeasureAssignment_2)
	{ after(grammarAccess.getErrorMeasureAccess().getErrorMeasureAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__MlRegressionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getMlRegressionMlRegressionParserRuleCall_0()); }
		ruleMlRegression
		{ after(grammarAccess.getModelAccess().getMlRegressionMlRegressionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__CsvFileAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMlRegressionAccess().getCsvFileCsvFileParserRuleCall_2_0()); }
		ruleCsvFile
		{ after(grammarAccess.getMlRegressionAccess().getCsvFileCsvFileParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__TestSizeAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMlRegressionAccess().getTestSizeTestSizeParserRuleCall_4_0()); }
		ruleTestSize
		{ after(grammarAccess.getMlRegressionAccess().getTestSizeTestSizeParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__PredictiveVarsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMlRegressionAccess().getPredictiveVarsPredictiveVarsParserRuleCall_6_0()); }
		rulePredictiveVars
		{ after(grammarAccess.getMlRegressionAccess().getPredictiveVarsPredictiveVarsParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__TargetVarAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMlRegressionAccess().getTargetVarTargetVarParserRuleCall_8_0()); }
		ruleTargetVar
		{ after(grammarAccess.getMlRegressionAccess().getTargetVarTargetVarParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__AlgorithmAssignment_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMlRegressionAccess().getAlgorithmAlgorithmParserRuleCall_10_0()); }
		ruleAlgorithm
		{ after(grammarAccess.getMlRegressionAccess().getAlgorithmAlgorithmParserRuleCall_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MlRegression__ErrorMeasureAssignment_12
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMlRegressionAccess().getErrorMeasureErrorMeasureParserRuleCall_12_0()); }
		ruleErrorMeasure
		{ after(grammarAccess.getMlRegressionAccess().getErrorMeasureErrorMeasureParserRuleCall_12_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CsvFile__CsvFileAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCsvFileAccess().getCsvFileSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getCsvFileAccess().getCsvFileSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSize__TestSizeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestSizeAccess().getTestSizeINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getTestSizeAccess().getTestSizeINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictiveVars__PredictiveVarAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredictiveVarsAccess().getPredictiveVarColVarParserRuleCall_3_0()); }
		ruleColVar
		{ after(grammarAccess.getPredictiveVarsAccess().getPredictiveVarColVarParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictiveVars__PredictiveVarAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredictiveVarsAccess().getPredictiveVarColVarParserRuleCall_4_1_0()); }
		ruleColVar
		{ after(grammarAccess.getPredictiveVarsAccess().getPredictiveVarColVarParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__TargetVarAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetVarAccess().getTargetVarColVarParserRuleCall_2_0()); }
		ruleColVar
		{ after(grammarAccess.getTargetVarAccess().getTargetVarColVarParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__AlgoNameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgorithmAccess().getAlgoNameAlgoNameEnumRuleCall_2_0()); }
		ruleAlgoName
		{ after(grammarAccess.getAlgorithmAccess().getAlgoNameAlgoNameEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorMeasure__ErrorMeasureAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getErrorMeasureAccess().getErrorMeasureErrorCalculationEnumRuleCall_2_0()); }
		ruleErrorCalculation
		{ after(grammarAccess.getErrorMeasureAccess().getErrorMeasureErrorCalculationEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColVar__IdColAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColVarAccess().getIdColINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getColVarAccess().getIdColINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
