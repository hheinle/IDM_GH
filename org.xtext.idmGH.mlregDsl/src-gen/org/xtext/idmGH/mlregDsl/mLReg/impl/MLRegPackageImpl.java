/**
 * generated by Xtext 2.24.0
 */
package org.xtext.idmGH.mlregDsl.mLReg.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.xtext.idmGH.mlregDsl.mLReg.AlgoName;
import org.xtext.idmGH.mlregDsl.mLReg.Algorithm;
import org.xtext.idmGH.mlregDsl.mLReg.ColVar;
import org.xtext.idmGH.mlregDsl.mLReg.CsvFile;
import org.xtext.idmGH.mlregDsl.mLReg.ErrorCalculation;
import org.xtext.idmGH.mlregDsl.mLReg.ErrorMeasure;
import org.xtext.idmGH.mlregDsl.mLReg.MLRegFactory;
import org.xtext.idmGH.mlregDsl.mLReg.MLRegPackage;
import org.xtext.idmGH.mlregDsl.mLReg.MlRegression;
import org.xtext.idmGH.mlregDsl.mLReg.Model;
import org.xtext.idmGH.mlregDsl.mLReg.PredictiveVars;
import org.xtext.idmGH.mlregDsl.mLReg.TargetVar;
import org.xtext.idmGH.mlregDsl.mLReg.TestSize;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MLRegPackageImpl extends EPackageImpl implements MLRegPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mlRegressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass csvFileEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass testSizeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass predictiveVarsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass targetVarEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass algorithmEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass errorMeasureEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass colVarEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum algoNameEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum errorCalculationEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.xtext.idmGH.mlregDsl.mLReg.MLRegPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private MLRegPackageImpl()
  {
    super(eNS_URI, MLRegFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link MLRegPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static MLRegPackage init()
  {
    if (isInited) return (MLRegPackage)EPackage.Registry.INSTANCE.getEPackage(MLRegPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredMLRegPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    MLRegPackageImpl theMLRegPackage = registeredMLRegPackage instanceof MLRegPackageImpl ? (MLRegPackageImpl)registeredMLRegPackage : new MLRegPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theMLRegPackage.createPackageContents();

    // Initialize created meta-data
    theMLRegPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theMLRegPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(MLRegPackage.eNS_URI, theMLRegPackage);
    return theMLRegPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModel()
  {
    return modelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_MlRegression()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMlRegression()
  {
    return mlRegressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMlRegression_CsvFile()
  {
    return (EReference)mlRegressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMlRegression_TestSize()
  {
    return (EReference)mlRegressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMlRegression_PredictiveVars()
  {
    return (EReference)mlRegressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMlRegression_TargetVar()
  {
    return (EReference)mlRegressionEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMlRegression_Algorithm()
  {
    return (EReference)mlRegressionEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMlRegression_ErrorMeasure()
  {
    return (EReference)mlRegressionEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCsvFile()
  {
    return csvFileEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCsvFile_CsvFile()
  {
    return (EAttribute)csvFileEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTestSize()
  {
    return testSizeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTestSize_TestSize()
  {
    return (EAttribute)testSizeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPredictiveVars()
  {
    return predictiveVarsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPredictiveVars_PredictiveVar()
  {
    return (EReference)predictiveVarsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTargetVar()
  {
    return targetVarEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTargetVar_TargetVar()
  {
    return (EReference)targetVarEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAlgorithm()
  {
    return algorithmEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAlgorithm_AlgoName()
  {
    return (EAttribute)algorithmEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getErrorMeasure()
  {
    return errorMeasureEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getErrorMeasure_ErrorMeasure()
  {
    return (EAttribute)errorMeasureEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getColVar()
  {
    return colVarEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getColVar_IdCol()
  {
    return (EAttribute)colVarEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getAlgoName()
  {
    return algoNameEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getErrorCalculation()
  {
    return errorCalculationEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MLRegFactory getMLRegFactory()
  {
    return (MLRegFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    modelEClass = createEClass(MODEL);
    createEReference(modelEClass, MODEL__ML_REGRESSION);

    mlRegressionEClass = createEClass(ML_REGRESSION);
    createEReference(mlRegressionEClass, ML_REGRESSION__CSV_FILE);
    createEReference(mlRegressionEClass, ML_REGRESSION__TEST_SIZE);
    createEReference(mlRegressionEClass, ML_REGRESSION__PREDICTIVE_VARS);
    createEReference(mlRegressionEClass, ML_REGRESSION__TARGET_VAR);
    createEReference(mlRegressionEClass, ML_REGRESSION__ALGORITHM);
    createEReference(mlRegressionEClass, ML_REGRESSION__ERROR_MEASURE);

    csvFileEClass = createEClass(CSV_FILE);
    createEAttribute(csvFileEClass, CSV_FILE__CSV_FILE);

    testSizeEClass = createEClass(TEST_SIZE);
    createEAttribute(testSizeEClass, TEST_SIZE__TEST_SIZE);

    predictiveVarsEClass = createEClass(PREDICTIVE_VARS);
    createEReference(predictiveVarsEClass, PREDICTIVE_VARS__PREDICTIVE_VAR);

    targetVarEClass = createEClass(TARGET_VAR);
    createEReference(targetVarEClass, TARGET_VAR__TARGET_VAR);

    algorithmEClass = createEClass(ALGORITHM);
    createEAttribute(algorithmEClass, ALGORITHM__ALGO_NAME);

    errorMeasureEClass = createEClass(ERROR_MEASURE);
    createEAttribute(errorMeasureEClass, ERROR_MEASURE__ERROR_MEASURE);

    colVarEClass = createEClass(COL_VAR);
    createEAttribute(colVarEClass, COL_VAR__ID_COL);

    // Create enums
    algoNameEEnum = createEEnum(ALGO_NAME);
    errorCalculationEEnum = createEEnum(ERROR_CALCULATION);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes

    // Initialize classes and features; add operations and parameters
    initEClass(modelEClass, Model.class, "Model", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getModel_MlRegression(), this.getMlRegression(), null, "mlRegression", null, 0, 1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mlRegressionEClass, MlRegression.class, "MlRegression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMlRegression_CsvFile(), this.getCsvFile(), null, "csvFile", null, 0, 1, MlRegression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMlRegression_TestSize(), this.getTestSize(), null, "testSize", null, 0, 1, MlRegression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMlRegression_PredictiveVars(), this.getPredictiveVars(), null, "predictiveVars", null, 0, 1, MlRegression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMlRegression_TargetVar(), this.getTargetVar(), null, "targetVar", null, 0, 1, MlRegression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMlRegression_Algorithm(), this.getAlgorithm(), null, "algorithm", null, 0, 1, MlRegression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMlRegression_ErrorMeasure(), this.getErrorMeasure(), null, "errorMeasure", null, 0, 1, MlRegression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(csvFileEClass, CsvFile.class, "CsvFile", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCsvFile_CsvFile(), ecorePackage.getEString(), "csvFile", null, 0, 1, CsvFile.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(testSizeEClass, TestSize.class, "TestSize", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTestSize_TestSize(), ecorePackage.getEInt(), "testSize", null, 0, 1, TestSize.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(predictiveVarsEClass, PredictiveVars.class, "PredictiveVars", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPredictiveVars_PredictiveVar(), this.getColVar(), null, "predictiveVar", null, 0, -1, PredictiveVars.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(targetVarEClass, TargetVar.class, "TargetVar", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTargetVar_TargetVar(), this.getColVar(), null, "targetVar", null, 0, 1, TargetVar.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(algorithmEClass, Algorithm.class, "Algorithm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAlgorithm_AlgoName(), this.getAlgoName(), "algoName", null, 0, 1, Algorithm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(errorMeasureEClass, ErrorMeasure.class, "ErrorMeasure", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getErrorMeasure_ErrorMeasure(), this.getErrorCalculation(), "errorMeasure", null, 0, 1, ErrorMeasure.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(colVarEClass, ColVar.class, "ColVar", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getColVar_IdCol(), ecorePackage.getEInt(), "idCol", null, 0, 1, ColVar.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(algoNameEEnum, AlgoName.class, "AlgoName");
    addEEnumLiteral(algoNameEEnum, AlgoName.REGRESSION_TREE);
    addEEnumLiteral(algoNameEEnum, AlgoName.SVM);
    addEEnumLiteral(algoNameEEnum, AlgoName.LINEAR);

    initEEnum(errorCalculationEEnum, ErrorCalculation.class, "ErrorCalculation");
    addEEnumLiteral(errorCalculationEEnum, ErrorCalculation.MEAN_SQUARED_ERROR);
    addEEnumLiteral(errorCalculationEEnum, ErrorCalculation.EXPLAINED_VARIANCE_SCORE);
    addEEnumLiteral(errorCalculationEEnum, ErrorCalculation.R2_SCORE);

    // Create resource
    createResource(eNS_URI);
  }

} //MLRegPackageImpl
