/*
 * generated by Xtext 2.24.0
 */
grammar InternalMLReg;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.idmGH.mlregDsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.idmGH.mlregDsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.idmGH.mlregDsl.services.MLRegGrammarAccess;

}

@parser::members {

 	private MLRegGrammarAccess grammarAccess;

    public InternalMLRegParser(TokenStream input, MLRegGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MLRegGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getMlRegressionMlRegressionParserRuleCall_0());
			}
			lv_mlRegression_0_0=ruleMlRegression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				set(
					$current,
					"mlRegression",
					lv_mlRegression_0_0,
					"org.xtext.idmGH.mlregDsl.MLReg.MlRegression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleMlRegression
entryRuleMlRegression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMlRegressionRule()); }
	iv_ruleMlRegression=ruleMlRegression
	{ $current=$iv_ruleMlRegression.current; }
	EOF;

// Rule MlRegression
ruleMlRegression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='regression'
		{
			newLeafNode(otherlv_0, grammarAccess.getMlRegressionAccess().getRegressionKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getMlRegressionAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMlRegressionAccess().getCsvFileCsvFileParserRuleCall_2_0());
				}
				lv_csvFile_2_0=ruleCsvFile
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMlRegressionRule());
					}
					set(
						$current,
						"csvFile",
						lv_csvFile_2_0,
						"org.xtext.idmGH.mlregDsl.MLReg.CsvFile");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getMlRegressionAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMlRegressionAccess().getTestSizeTestSizeParserRuleCall_4_0());
				}
				lv_testSize_4_0=ruleTestSize
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMlRegressionRule());
					}
					set(
						$current,
						"testSize",
						lv_testSize_4_0,
						"org.xtext.idmGH.mlregDsl.MLReg.TestSize");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getMlRegressionAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMlRegressionAccess().getPredictiveVarsPredictiveVarsParserRuleCall_6_0());
				}
				lv_predictiveVars_6_0=rulePredictiveVars
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMlRegressionRule());
					}
					set(
						$current,
						"predictiveVars",
						lv_predictiveVars_6_0,
						"org.xtext.idmGH.mlregDsl.MLReg.PredictiveVars");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=','
		{
			newLeafNode(otherlv_7, grammarAccess.getMlRegressionAccess().getCommaKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMlRegressionAccess().getTargetVarTargetVarParserRuleCall_8_0());
				}
				lv_targetVar_8_0=ruleTargetVar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMlRegressionRule());
					}
					set(
						$current,
						"targetVar",
						lv_targetVar_8_0,
						"org.xtext.idmGH.mlregDsl.MLReg.TargetVar");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9=','
		{
			newLeafNode(otherlv_9, grammarAccess.getMlRegressionAccess().getCommaKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMlRegressionAccess().getAlgorithmAlgorithmParserRuleCall_10_0());
				}
				lv_algorithm_10_0=ruleAlgorithm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMlRegressionRule());
					}
					set(
						$current,
						"algorithm",
						lv_algorithm_10_0,
						"org.xtext.idmGH.mlregDsl.MLReg.Algorithm");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_11=','
		{
			newLeafNode(otherlv_11, grammarAccess.getMlRegressionAccess().getCommaKeyword_11());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMlRegressionAccess().getErrorMeasureErrorMeasureParserRuleCall_12_0());
				}
				lv_errorMeasure_12_0=ruleErrorMeasure
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMlRegressionRule());
					}
					set(
						$current,
						"errorMeasure",
						lv_errorMeasure_12_0,
						"org.xtext.idmGH.mlregDsl.MLReg.ErrorMeasure");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_13='}'
		{
			newLeafNode(otherlv_13, grammarAccess.getMlRegressionAccess().getRightCurlyBracketKeyword_13());
		}
	)
;

// Entry rule entryRuleCsvFile
entryRuleCsvFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCsvFileRule()); }
	iv_ruleCsvFile=ruleCsvFile
	{ $current=$iv_ruleCsvFile.current; }
	EOF;

// Rule CsvFile
ruleCsvFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='file'
		{
			newLeafNode(otherlv_0, grammarAccess.getCsvFileAccess().getFileKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getCsvFileAccess().getColonKeyword_1());
		}
		(
			(
				lv_csvFile_2_0=RULE_STRING
				{
					newLeafNode(lv_csvFile_2_0, grammarAccess.getCsvFileAccess().getCsvFileSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCsvFileRule());
					}
					setWithLastConsumed(
						$current,
						"csvFile",
						lv_csvFile_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleTestSize
entryRuleTestSize returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestSizeRule()); }
	iv_ruleTestSize=ruleTestSize
	{ $current=$iv_ruleTestSize.current; }
	EOF;

// Rule TestSize
ruleTestSize returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTestSizeAccess().getTestSizeAction_0(),
					$current);
			}
		)
		otherlv_1='testSize'
		{
			newLeafNode(otherlv_1, grammarAccess.getTestSizeAccess().getTestSizeKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getTestSizeAccess().getColonKeyword_2());
		}
		(
			(
				lv_testSize_3_0=RULE_INT
				{
					newLeafNode(lv_testSize_3_0, grammarAccess.getTestSizeAccess().getTestSizeINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestSizeRule());
					}
					setWithLastConsumed(
						$current,
						"testSize",
						lv_testSize_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRulePredictiveVars
entryRulePredictiveVars returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredictiveVarsRule()); }
	iv_rulePredictiveVars=rulePredictiveVars
	{ $current=$iv_rulePredictiveVars.current; }
	EOF;

// Rule PredictiveVars
rulePredictiveVars returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='predictiveVariables'
		{
			newLeafNode(otherlv_0, grammarAccess.getPredictiveVarsAccess().getPredictiveVariablesKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getPredictiveVarsAccess().getColonKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPredictiveVarsAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPredictiveVarsAccess().getPredictiveVarColVarParserRuleCall_3_0());
				}
				lv_predictiveVar_3_0=ruleColVar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredictiveVarsRule());
					}
					add(
						$current,
						"predictiveVar",
						lv_predictiveVar_3_0,
						"org.xtext.idmGH.mlregDsl.MLReg.ColVar");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getPredictiveVarsAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPredictiveVarsAccess().getPredictiveVarColVarParserRuleCall_4_1_0());
					}
					lv_predictiveVar_5_0=ruleColVar
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredictiveVarsRule());
						}
						add(
							$current,
							"predictiveVar",
							lv_predictiveVar_5_0,
							"org.xtext.idmGH.mlregDsl.MLReg.ColVar");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getPredictiveVarsAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleTargetVar
entryRuleTargetVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTargetVarRule()); }
	iv_ruleTargetVar=ruleTargetVar
	{ $current=$iv_ruleTargetVar.current; }
	EOF;

// Rule TargetVar
ruleTargetVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='targetVariable'
		{
			newLeafNode(otherlv_0, grammarAccess.getTargetVarAccess().getTargetVariableKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getTargetVarAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTargetVarAccess().getTargetVarColVarParserRuleCall_2_0());
				}
				lv_targetVar_2_0=ruleColVar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTargetVarRule());
					}
					set(
						$current,
						"targetVar",
						lv_targetVar_2_0,
						"org.xtext.idmGH.mlregDsl.MLReg.ColVar");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAlgorithm
entryRuleAlgorithm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlgorithmRule()); }
	iv_ruleAlgorithm=ruleAlgorithm
	{ $current=$iv_ruleAlgorithm.current; }
	EOF;

// Rule Algorithm
ruleAlgorithm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='algorithm'
		{
			newLeafNode(otherlv_0, grammarAccess.getAlgorithmAccess().getAlgorithmKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getAlgorithmAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAlgorithmAccess().getAlgoNameAlgoNameEnumRuleCall_2_0());
				}
				lv_algoName_2_0=ruleAlgoName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlgorithmRule());
					}
					set(
						$current,
						"algoName",
						lv_algoName_2_0,
						"org.xtext.idmGH.mlregDsl.MLReg.AlgoName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleErrorMeasure
entryRuleErrorMeasure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getErrorMeasureRule()); }
	iv_ruleErrorMeasure=ruleErrorMeasure
	{ $current=$iv_ruleErrorMeasure.current; }
	EOF;

// Rule ErrorMeasure
ruleErrorMeasure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='errorType'
		{
			newLeafNode(otherlv_0, grammarAccess.getErrorMeasureAccess().getErrorTypeKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getErrorMeasureAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getErrorMeasureAccess().getErrorMeasureErrorCalculationEnumRuleCall_2_0());
				}
				lv_errorMeasure_2_0=ruleErrorCalculation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getErrorMeasureRule());
					}
					set(
						$current,
						"errorMeasure",
						lv_errorMeasure_2_0,
						"org.xtext.idmGH.mlregDsl.MLReg.ErrorCalculation");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleColVar
entryRuleColVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColVarRule()); }
	iv_ruleColVar=ruleColVar
	{ $current=$iv_ruleColVar.current; }
	EOF;

// Rule ColVar
ruleColVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_idCol_0_0=RULE_INT
			{
				newLeafNode(lv_idCol_0_0, grammarAccess.getColVarAccess().getIdColINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getColVarRule());
				}
				setWithLastConsumed(
					$current,
					"idCol",
					lv_idCol_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Rule AlgoName
ruleAlgoName returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='RegressionTree'
			{
				$current = grammarAccess.getAlgoNameAccess().getRegressionTreeEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAlgoNameAccess().getRegressionTreeEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='SVM'
			{
				$current = grammarAccess.getAlgoNameAccess().getSVMEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAlgoNameAccess().getSVMEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Linear'
			{
				$current = grammarAccess.getAlgoNameAccess().getLinearEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAlgoNameAccess().getLinearEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule ErrorCalculation
ruleErrorCalculation returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='mean_squared_error'
			{
				$current = grammarAccess.getErrorCalculationAccess().getMean_squared_errorEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getErrorCalculationAccess().getMean_squared_errorEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='explained_variance_score'
			{
				$current = grammarAccess.getErrorCalculationAccess().getExplained_variance_scoreEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getErrorCalculationAccess().getExplained_variance_scoreEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='r2_score'
			{
				$current = grammarAccess.getErrorCalculationAccess().getR2_scoreEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getErrorCalculationAccess().getR2_scoreEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
