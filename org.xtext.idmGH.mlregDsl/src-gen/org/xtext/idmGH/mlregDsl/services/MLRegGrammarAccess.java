/*
 * generated by Xtext 2.24.0
 */
package org.xtext.idmGH.mlregDsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MLRegGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.idmGH.mlregDsl.MLReg.Model");
		private final Assignment cMlRegressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMlRegressionMlRegressionParserRuleCall_0 = (RuleCall)cMlRegressionAssignment.eContents().get(0);
		
		//Model:
		//	mlRegression=MlRegression;
		@Override public ParserRule getRule() { return rule; }
		
		//mlRegression=MlRegression
		public Assignment getMlRegressionAssignment() { return cMlRegressionAssignment; }
		
		//MlRegression
		public RuleCall getMlRegressionMlRegressionParserRuleCall_0() { return cMlRegressionMlRegressionParserRuleCall_0; }
	}
	public class MlRegressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.idmGH.mlregDsl.MLReg.MlRegression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCsvFileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCsvFileCsvFileParserRuleCall_2_0 = (RuleCall)cCsvFileAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTestSizeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTestSizeTestSizeParserRuleCall_4_0 = (RuleCall)cTestSizeAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPredictiveVarsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPredictiveVarsPredictiveVarsParserRuleCall_6_0 = (RuleCall)cPredictiveVarsAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTargetVarAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTargetVarTargetVarParserRuleCall_8_0 = (RuleCall)cTargetVarAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cAlgorithmAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cAlgorithmAlgorithmParserRuleCall_10_0 = (RuleCall)cAlgorithmAssignment_10.eContents().get(0);
		private final Keyword cCommaKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cErrorMeasureAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cErrorMeasureErrorMeasureParserRuleCall_12_0 = (RuleCall)cErrorMeasureAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//MlRegression:
		//	'regression' '{'
		//	csvFile=CsvFile
		//	','
		//	testSize=TestSize
		//	','
		//	predictiveVars=PredictiveVars
		//	','
		//	targetVar=TargetVar
		//	','
		//	algorithm=Algorithm
		//	','
		//	errorMeasure=ErrorMeasure
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'regression' '{'
		//csvFile=CsvFile
		//','
		//testSize=TestSize
		//','
		//predictiveVars=PredictiveVars
		//','
		//targetVar=TargetVar
		//','
		//algorithm=Algorithm
		//','
		//errorMeasure=ErrorMeasure
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'regression'
		public Keyword getRegressionKeyword_0() { return cRegressionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//csvFile=CsvFile
		public Assignment getCsvFileAssignment_2() { return cCsvFileAssignment_2; }
		
		//CsvFile
		public RuleCall getCsvFileCsvFileParserRuleCall_2_0() { return cCsvFileCsvFileParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//testSize=TestSize
		public Assignment getTestSizeAssignment_4() { return cTestSizeAssignment_4; }
		
		//TestSize
		public RuleCall getTestSizeTestSizeParserRuleCall_4_0() { return cTestSizeTestSizeParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//predictiveVars=PredictiveVars
		public Assignment getPredictiveVarsAssignment_6() { return cPredictiveVarsAssignment_6; }
		
		//PredictiveVars
		public RuleCall getPredictiveVarsPredictiveVarsParserRuleCall_6_0() { return cPredictiveVarsPredictiveVarsParserRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//targetVar=TargetVar
		public Assignment getTargetVarAssignment_8() { return cTargetVarAssignment_8; }
		
		//TargetVar
		public RuleCall getTargetVarTargetVarParserRuleCall_8_0() { return cTargetVarTargetVarParserRuleCall_8_0; }
		
		//','
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//algorithm=Algorithm
		public Assignment getAlgorithmAssignment_10() { return cAlgorithmAssignment_10; }
		
		//Algorithm
		public RuleCall getAlgorithmAlgorithmParserRuleCall_10_0() { return cAlgorithmAlgorithmParserRuleCall_10_0; }
		
		//','
		public Keyword getCommaKeyword_11() { return cCommaKeyword_11; }
		
		//errorMeasure=ErrorMeasure
		public Assignment getErrorMeasureAssignment_12() { return cErrorMeasureAssignment_12; }
		
		//ErrorMeasure
		public RuleCall getErrorMeasureErrorMeasureParserRuleCall_12_0() { return cErrorMeasureErrorMeasureParserRuleCall_12_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class CsvFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.idmGH.mlregDsl.MLReg.CsvFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCsvFileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCsvFileSTRINGTerminalRuleCall_2_0 = (RuleCall)cCsvFileAssignment_2.eContents().get(0);
		
		//CsvFile:
		//	'file' ':' csvFile=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'file' ':' csvFile=STRING
		public Group getGroup() { return cGroup; }
		
		//'file'
		public Keyword getFileKeyword_0() { return cFileKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//csvFile=STRING
		public Assignment getCsvFileAssignment_2() { return cCsvFileAssignment_2; }
		
		//STRING
		public RuleCall getCsvFileSTRINGTerminalRuleCall_2_0() { return cCsvFileSTRINGTerminalRuleCall_2_0; }
	}
	public class TestSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.idmGH.mlregDsl.MLReg.TestSize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTestSizeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTestSizeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTestSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTestSizeINTTerminalRuleCall_3_0 = (RuleCall)cTestSizeAssignment_3.eContents().get(0);
		
		//TestSize:
		//	{TestSize} 'testSize' ':' testSize=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{TestSize} 'testSize' ':' testSize=INT
		public Group getGroup() { return cGroup; }
		
		//{TestSize}
		public Action getTestSizeAction_0() { return cTestSizeAction_0; }
		
		//'testSize'
		public Keyword getTestSizeKeyword_1() { return cTestSizeKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//testSize=INT
		public Assignment getTestSizeAssignment_3() { return cTestSizeAssignment_3; }
		
		//INT
		public RuleCall getTestSizeINTTerminalRuleCall_3_0() { return cTestSizeINTTerminalRuleCall_3_0; }
	}
	public class PredictiveVarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.idmGH.mlregDsl.MLReg.PredictiveVars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPredictiveVariablesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredictiveVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredictiveVarColVarParserRuleCall_3_0 = (RuleCall)cPredictiveVarAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPredictiveVarAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPredictiveVarColVarParserRuleCall_4_1_0 = (RuleCall)cPredictiveVarAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PredictiveVars:
		//	'predictiveVariables' ':' '{' predictiveVar+=ColVar (',' predictiveVar+=ColVar)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'predictiveVariables' ':' '{' predictiveVar+=ColVar (',' predictiveVar+=ColVar)* '}'
		public Group getGroup() { return cGroup; }
		
		//'predictiveVariables'
		public Keyword getPredictiveVariablesKeyword_0() { return cPredictiveVariablesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//predictiveVar+=ColVar
		public Assignment getPredictiveVarAssignment_3() { return cPredictiveVarAssignment_3; }
		
		//ColVar
		public RuleCall getPredictiveVarColVarParserRuleCall_3_0() { return cPredictiveVarColVarParserRuleCall_3_0; }
		
		//(',' predictiveVar+=ColVar)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//predictiveVar+=ColVar
		public Assignment getPredictiveVarAssignment_4_1() { return cPredictiveVarAssignment_4_1; }
		
		//ColVar
		public RuleCall getPredictiveVarColVarParserRuleCall_4_1_0() { return cPredictiveVarColVarParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TargetVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.idmGH.mlregDsl.MLReg.TargetVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTargetVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetVarColVarParserRuleCall_2_0 = (RuleCall)cTargetVarAssignment_2.eContents().get(0);
		
		//TargetVar:
		//	'targetVariable' ':' targetVar=ColVar;
		@Override public ParserRule getRule() { return rule; }
		
		//'targetVariable' ':' targetVar=ColVar
		public Group getGroup() { return cGroup; }
		
		//'targetVariable'
		public Keyword getTargetVariableKeyword_0() { return cTargetVariableKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//targetVar=ColVar
		public Assignment getTargetVarAssignment_2() { return cTargetVarAssignment_2; }
		
		//ColVar
		public RuleCall getTargetVarColVarParserRuleCall_2_0() { return cTargetVarColVarParserRuleCall_2_0; }
	}
	public class AlgorithmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.idmGH.mlregDsl.MLReg.Algorithm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlgorithmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAlgoNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAlgoNameAlgoNameEnumRuleCall_2_0 = (RuleCall)cAlgoNameAssignment_2.eContents().get(0);
		
		//Algorithm:
		//	'algorithm' ':' algoName=AlgoName;
		@Override public ParserRule getRule() { return rule; }
		
		//'algorithm' ':' algoName=AlgoName
		public Group getGroup() { return cGroup; }
		
		//'algorithm'
		public Keyword getAlgorithmKeyword_0() { return cAlgorithmKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//algoName=AlgoName
		public Assignment getAlgoNameAssignment_2() { return cAlgoNameAssignment_2; }
		
		//AlgoName
		public RuleCall getAlgoNameAlgoNameEnumRuleCall_2_0() { return cAlgoNameAlgoNameEnumRuleCall_2_0; }
	}
	public class ErrorMeasureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.idmGH.mlregDsl.MLReg.ErrorMeasure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cErrorMeasureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cErrorMeasureErrorCalculationEnumRuleCall_2_0 = (RuleCall)cErrorMeasureAssignment_2.eContents().get(0);
		
		//ErrorMeasure:
		//	'errorType' ':' errorMeasure=ErrorCalculation;
		@Override public ParserRule getRule() { return rule; }
		
		//'errorType' ':' errorMeasure=ErrorCalculation
		public Group getGroup() { return cGroup; }
		
		//'errorType'
		public Keyword getErrorTypeKeyword_0() { return cErrorTypeKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//errorMeasure=ErrorCalculation
		public Assignment getErrorMeasureAssignment_2() { return cErrorMeasureAssignment_2; }
		
		//ErrorCalculation
		public RuleCall getErrorMeasureErrorCalculationEnumRuleCall_2_0() { return cErrorMeasureErrorCalculationEnumRuleCall_2_0; }
	}
	public class ColVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.idmGH.mlregDsl.MLReg.ColVar");
		private final Assignment cIdColAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdColINTTerminalRuleCall_0 = (RuleCall)cIdColAssignment.eContents().get(0);
		
		//ColVar:
		//	idCol=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//idCol=INT
		public Assignment getIdColAssignment() { return cIdColAssignment; }
		
		//INT
		public RuleCall getIdColINTTerminalRuleCall_0() { return cIdColINTTerminalRuleCall_0; }
	}
	
	public class AlgoNameElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.idmGH.mlregDsl.MLReg.AlgoName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRegressionTreeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRegressionTreeRegressionTreeKeyword_0_0 = (Keyword)cRegressionTreeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSVMEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSVMSVMKeyword_1_0 = (Keyword)cSVMEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLinearEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLinearLinearKeyword_2_0 = (Keyword)cLinearEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AlgoName:
		//	regressionTree='RegressionTree' | SVM | linear='Linear';
		public EnumRule getRule() { return rule; }
		
		//regressionTree='RegressionTree' | SVM | linear='Linear'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//regressionTree='RegressionTree'
		public EnumLiteralDeclaration getRegressionTreeEnumLiteralDeclaration_0() { return cRegressionTreeEnumLiteralDeclaration_0; }
		
		//'RegressionTree'
		public Keyword getRegressionTreeRegressionTreeKeyword_0_0() { return cRegressionTreeRegressionTreeKeyword_0_0; }
		
		//SVM
		public EnumLiteralDeclaration getSVMEnumLiteralDeclaration_1() { return cSVMEnumLiteralDeclaration_1; }
		
		//'SVM'
		public Keyword getSVMSVMKeyword_1_0() { return cSVMSVMKeyword_1_0; }
		
		//linear='Linear'
		public EnumLiteralDeclaration getLinearEnumLiteralDeclaration_2() { return cLinearEnumLiteralDeclaration_2; }
		
		//'Linear'
		public Keyword getLinearLinearKeyword_2_0() { return cLinearLinearKeyword_2_0; }
	}
	public class ErrorCalculationElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.idmGH.mlregDsl.MLReg.ErrorCalculation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMean_squared_errorEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMean_squared_errorMean_squared_errorKeyword_0_0 = (Keyword)cMean_squared_errorEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cExplained_variance_scoreEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cExplained_variance_scoreExplained_variance_scoreKeyword_1_0 = (Keyword)cExplained_variance_scoreEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cR2_scoreEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cR2_scoreR2_scoreKeyword_2_0 = (Keyword)cR2_scoreEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ErrorCalculation:
		//	mean_squared_error | explained_variance_score | r2_score;
		public EnumRule getRule() { return rule; }
		
		//mean_squared_error | explained_variance_score | r2_score
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//mean_squared_error
		public EnumLiteralDeclaration getMean_squared_errorEnumLiteralDeclaration_0() { return cMean_squared_errorEnumLiteralDeclaration_0; }
		
		//'mean_squared_error'
		public Keyword getMean_squared_errorMean_squared_errorKeyword_0_0() { return cMean_squared_errorMean_squared_errorKeyword_0_0; }
		
		//explained_variance_score
		public EnumLiteralDeclaration getExplained_variance_scoreEnumLiteralDeclaration_1() { return cExplained_variance_scoreEnumLiteralDeclaration_1; }
		
		//'explained_variance_score'
		public Keyword getExplained_variance_scoreExplained_variance_scoreKeyword_1_0() { return cExplained_variance_scoreExplained_variance_scoreKeyword_1_0; }
		
		//r2_score
		public EnumLiteralDeclaration getR2_scoreEnumLiteralDeclaration_2() { return cR2_scoreEnumLiteralDeclaration_2; }
		
		//'r2_score'
		public Keyword getR2_scoreR2_scoreKeyword_2_0() { return cR2_scoreR2_scoreKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final MlRegressionElements pMlRegression;
	private final CsvFileElements pCsvFile;
	private final TestSizeElements pTestSize;
	private final PredictiveVarsElements pPredictiveVars;
	private final TargetVarElements pTargetVar;
	private final AlgorithmElements pAlgorithm;
	private final AlgoNameElements eAlgoName;
	private final ErrorMeasureElements pErrorMeasure;
	private final ErrorCalculationElements eErrorCalculation;
	private final ColVarElements pColVar;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MLRegGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pMlRegression = new MlRegressionElements();
		this.pCsvFile = new CsvFileElements();
		this.pTestSize = new TestSizeElements();
		this.pPredictiveVars = new PredictiveVarsElements();
		this.pTargetVar = new TargetVarElements();
		this.pAlgorithm = new AlgorithmElements();
		this.eAlgoName = new AlgoNameElements();
		this.pErrorMeasure = new ErrorMeasureElements();
		this.eErrorCalculation = new ErrorCalculationElements();
		this.pColVar = new ColVarElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.idmGH.mlregDsl.MLReg".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	mlRegression=MlRegression;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//MlRegression:
	//	'regression' '{'
	//	csvFile=CsvFile
	//	','
	//	testSize=TestSize
	//	','
	//	predictiveVars=PredictiveVars
	//	','
	//	targetVar=TargetVar
	//	','
	//	algorithm=Algorithm
	//	','
	//	errorMeasure=ErrorMeasure
	//	'}';
	public MlRegressionElements getMlRegressionAccess() {
		return pMlRegression;
	}
	
	public ParserRule getMlRegressionRule() {
		return getMlRegressionAccess().getRule();
	}
	
	//CsvFile:
	//	'file' ':' csvFile=STRING;
	public CsvFileElements getCsvFileAccess() {
		return pCsvFile;
	}
	
	public ParserRule getCsvFileRule() {
		return getCsvFileAccess().getRule();
	}
	
	//TestSize:
	//	{TestSize} 'testSize' ':' testSize=INT;
	public TestSizeElements getTestSizeAccess() {
		return pTestSize;
	}
	
	public ParserRule getTestSizeRule() {
		return getTestSizeAccess().getRule();
	}
	
	//PredictiveVars:
	//	'predictiveVariables' ':' '{' predictiveVar+=ColVar (',' predictiveVar+=ColVar)* '}';
	public PredictiveVarsElements getPredictiveVarsAccess() {
		return pPredictiveVars;
	}
	
	public ParserRule getPredictiveVarsRule() {
		return getPredictiveVarsAccess().getRule();
	}
	
	//TargetVar:
	//	'targetVariable' ':' targetVar=ColVar;
	public TargetVarElements getTargetVarAccess() {
		return pTargetVar;
	}
	
	public ParserRule getTargetVarRule() {
		return getTargetVarAccess().getRule();
	}
	
	//Algorithm:
	//	'algorithm' ':' algoName=AlgoName;
	public AlgorithmElements getAlgorithmAccess() {
		return pAlgorithm;
	}
	
	public ParserRule getAlgorithmRule() {
		return getAlgorithmAccess().getRule();
	}
	
	//enum AlgoName:
	//	regressionTree='RegressionTree' | SVM | linear='Linear';
	public AlgoNameElements getAlgoNameAccess() {
		return eAlgoName;
	}
	
	public EnumRule getAlgoNameRule() {
		return getAlgoNameAccess().getRule();
	}
	
	//ErrorMeasure:
	//	'errorType' ':' errorMeasure=ErrorCalculation;
	public ErrorMeasureElements getErrorMeasureAccess() {
		return pErrorMeasure;
	}
	
	public ParserRule getErrorMeasureRule() {
		return getErrorMeasureAccess().getRule();
	}
	
	//enum ErrorCalculation:
	//	mean_squared_error | explained_variance_score | r2_score;
	public ErrorCalculationElements getErrorCalculationAccess() {
		return eErrorCalculation;
	}
	
	public EnumRule getErrorCalculationRule() {
		return getErrorCalculationAccess().getRule();
	}
	
	//ColVar:
	//	idCol=INT;
	public ColVarElements getColVarAccess() {
		return pColVar;
	}
	
	public ParserRule getColVarRule() {
		return getColVarAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
