/*
 * generated by Xtext 2.24.0
 */
package org.xtext.idmGH.mlregDsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.idmGH.mlregDsl.mLReg.Algorithm;
import org.xtext.idmGH.mlregDsl.mLReg.ColVar;
import org.xtext.idmGH.mlregDsl.mLReg.CsvFile;
import org.xtext.idmGH.mlregDsl.mLReg.ErrorMeasure;
import org.xtext.idmGH.mlregDsl.mLReg.MLRegPackage;
import org.xtext.idmGH.mlregDsl.mLReg.MlRegression;
import org.xtext.idmGH.mlregDsl.mLReg.Model;
import org.xtext.idmGH.mlregDsl.mLReg.PredictiveVars;
import org.xtext.idmGH.mlregDsl.mLReg.TargetVar;
import org.xtext.idmGH.mlregDsl.mLReg.TestSize;
import org.xtext.idmGH.mlregDsl.services.MLRegGrammarAccess;

@SuppressWarnings("all")
public class MLRegSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MLRegGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MLRegPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MLRegPackage.ALGORITHM:
				sequence_Algorithm(context, (Algorithm) semanticObject); 
				return; 
			case MLRegPackage.COL_VAR:
				sequence_ColVar(context, (ColVar) semanticObject); 
				return; 
			case MLRegPackage.CSV_FILE:
				sequence_CsvFile(context, (CsvFile) semanticObject); 
				return; 
			case MLRegPackage.ERROR_MEASURE:
				sequence_ErrorMeasure(context, (ErrorMeasure) semanticObject); 
				return; 
			case MLRegPackage.ML_REGRESSION:
				sequence_MlRegression(context, (MlRegression) semanticObject); 
				return; 
			case MLRegPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MLRegPackage.PREDICTIVE_VARS:
				sequence_PredictiveVars(context, (PredictiveVars) semanticObject); 
				return; 
			case MLRegPackage.TARGET_VAR:
				sequence_TargetVar(context, (TargetVar) semanticObject); 
				return; 
			case MLRegPackage.TEST_SIZE:
				sequence_TestSize(context, (TestSize) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Algorithm returns Algorithm
	 *
	 * Constraint:
	 *     algoName=AlgoName
	 */
	protected void sequence_Algorithm(ISerializationContext context, Algorithm semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegPackage.Literals.ALGORITHM__ALGO_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegPackage.Literals.ALGORITHM__ALGO_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAlgorithmAccess().getAlgoNameAlgoNameEnumRuleCall_2_0(), semanticObject.getAlgoName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ColVar returns ColVar
	 *
	 * Constraint:
	 *     idCol=INT
	 */
	protected void sequence_ColVar(ISerializationContext context, ColVar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegPackage.Literals.COL_VAR__ID_COL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegPackage.Literals.COL_VAR__ID_COL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColVarAccess().getIdColINTTerminalRuleCall_0(), semanticObject.getIdCol());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CsvFile returns CsvFile
	 *
	 * Constraint:
	 *     csvFile=STRING
	 */
	protected void sequence_CsvFile(ISerializationContext context, CsvFile semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegPackage.Literals.CSV_FILE__CSV_FILE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegPackage.Literals.CSV_FILE__CSV_FILE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCsvFileAccess().getCsvFileSTRINGTerminalRuleCall_2_0(), semanticObject.getCsvFile());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ErrorMeasure returns ErrorMeasure
	 *
	 * Constraint:
	 *     errorMeasure=ErrorCalculation
	 */
	protected void sequence_ErrorMeasure(ISerializationContext context, ErrorMeasure semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegPackage.Literals.ERROR_MEASURE__ERROR_MEASURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegPackage.Literals.ERROR_MEASURE__ERROR_MEASURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getErrorMeasureAccess().getErrorMeasureErrorCalculationEnumRuleCall_2_0(), semanticObject.getErrorMeasure());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MlRegression returns MlRegression
	 *
	 * Constraint:
	 *     (
	 *         csvFile=CsvFile 
	 *         testSize=TestSize 
	 *         predictiveVars=PredictiveVars 
	 *         targetVar=TargetVar 
	 *         algorithm=Algorithm 
	 *         errorMeasure=ErrorMeasure
	 *     )
	 */
	protected void sequence_MlRegression(ISerializationContext context, MlRegression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegPackage.Literals.ML_REGRESSION__CSV_FILE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegPackage.Literals.ML_REGRESSION__CSV_FILE));
			if (transientValues.isValueTransient(semanticObject, MLRegPackage.Literals.ML_REGRESSION__TEST_SIZE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegPackage.Literals.ML_REGRESSION__TEST_SIZE));
			if (transientValues.isValueTransient(semanticObject, MLRegPackage.Literals.ML_REGRESSION__PREDICTIVE_VARS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegPackage.Literals.ML_REGRESSION__PREDICTIVE_VARS));
			if (transientValues.isValueTransient(semanticObject, MLRegPackage.Literals.ML_REGRESSION__TARGET_VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegPackage.Literals.ML_REGRESSION__TARGET_VAR));
			if (transientValues.isValueTransient(semanticObject, MLRegPackage.Literals.ML_REGRESSION__ALGORITHM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegPackage.Literals.ML_REGRESSION__ALGORITHM));
			if (transientValues.isValueTransient(semanticObject, MLRegPackage.Literals.ML_REGRESSION__ERROR_MEASURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegPackage.Literals.ML_REGRESSION__ERROR_MEASURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMlRegressionAccess().getCsvFileCsvFileParserRuleCall_2_0(), semanticObject.getCsvFile());
		feeder.accept(grammarAccess.getMlRegressionAccess().getTestSizeTestSizeParserRuleCall_4_0(), semanticObject.getTestSize());
		feeder.accept(grammarAccess.getMlRegressionAccess().getPredictiveVarsPredictiveVarsParserRuleCall_6_0(), semanticObject.getPredictiveVars());
		feeder.accept(grammarAccess.getMlRegressionAccess().getTargetVarTargetVarParserRuleCall_8_0(), semanticObject.getTargetVar());
		feeder.accept(grammarAccess.getMlRegressionAccess().getAlgorithmAlgorithmParserRuleCall_10_0(), semanticObject.getAlgorithm());
		feeder.accept(grammarAccess.getMlRegressionAccess().getErrorMeasureErrorMeasureParserRuleCall_12_0(), semanticObject.getErrorMeasure());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     mlRegression=MlRegression
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegPackage.Literals.MODEL__ML_REGRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegPackage.Literals.MODEL__ML_REGRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelAccess().getMlRegressionMlRegressionParserRuleCall_0(), semanticObject.getMlRegression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PredictiveVars returns PredictiveVars
	 *
	 * Constraint:
	 *     (predictiveVar+=ColVar predictiveVar+=ColVar*)
	 */
	protected void sequence_PredictiveVars(ISerializationContext context, PredictiveVars semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetVar returns TargetVar
	 *
	 * Constraint:
	 *     targetVar=ColVar
	 */
	protected void sequence_TargetVar(ISerializationContext context, TargetVar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegPackage.Literals.TARGET_VAR__TARGET_VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegPackage.Literals.TARGET_VAR__TARGET_VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTargetVarAccess().getTargetVarColVarParserRuleCall_2_0(), semanticObject.getTargetVar());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TestSize returns TestSize
	 *
	 * Constraint:
	 *     testSize=INT
	 */
	protected void sequence_TestSize(ISerializationContext context, TestSize semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegPackage.Literals.TEST_SIZE__TEST_SIZE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegPackage.Literals.TEST_SIZE__TEST_SIZE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTestSizeAccess().getTestSizeINTTerminalRuleCall_3_0(), semanticObject.getTestSize());
		feeder.finish();
	}
	
	
}
